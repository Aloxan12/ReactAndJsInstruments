// Регулярные выражения

const pattern = /test/ // литерал
const pattern2 = new RegExp('test') // конструктор
// В обоих случаях создается одно и то же регулярное выражение

const pattern3 = /[test]/ //оператор класса символов
// в случае с литералом важна последовательность символов, тут - нет
// однако, иметь ввиду, что совпадение в данном примере будет происходить только с одним символом
// в проверяемой строке
// console.log('pattern', pattern.test('et')) // false
// console.log('pattern3', pattern3.test('et')) // true


// Шаблоны:
// ^ - все кроме указанных символов, пример [^es]
// \ - Экранирование - любой следующий за ним символ, делает его тем самым буквально сопоставляемым членом данного выражения
// ? - Если требуется задать символ как необязательный /t?еst/ ===> est=true
// + - Если требуется, чтобы с имвол присутствовал однократно или многократно /t+еst/ ===> est=false test=true ttest=true
// * - Если требуется, чтобы символ присутствовал многократно или вообще отсуствовал /t+еst/ ===> est=true test=true ttest=true
// {5}, {4, 9} - Если требуется задать фиксированное число повторений символа в проверяемой на совпадение строке,
        // это число следует указать в фигурных скобках /а{4}/,
        // если в передлах какого то числа, то через занятую /a{4, 10}/
        // если в расширяемых пределах какого то числа, то опустить второе число, но оставить запятую /a{4,}/



// Флаги:
// для литерала /test/ig
// для конструктора new RegExp('test', 'ig')

// i - делает регулярное выражение не зависящим от регистра
// g - допускает совпадение со всеми экземплярами шаблона
// m - допускает сопоставление со многими строками , которые могут быть получены из значения элемента разметки textarea .