// closure

//Замыкание наблюдается тогда, когда функция использует переменную(-ые)
// из другой(-их) области(-ей) видимости даже при выполнении в области видимости,
// в которой эта(-и) переменная(‑ые) должна(ы) быть недоступна(-ы).
// Ключевые части определения:
// y
// в замыкании должна быть задействована функция;
// y
// она должна обращаться хотя бы к одной переменной из внешней области видимости;
// y
// функция должна вызываться из другой ветви цепочки областей видимости относительно той, в которой находи(-я)тся переменная(-ые).

//Основанная на наблюдаемости: замыкание — экземпляр функции,
// запоминающей свои внешние переменные даже при ее передаче и вызове в других областях видимости.
// y
// Основанная на реализации: замыкание — экземпляр функции и окружение ее области видимости,
// хранящиеся «на месте»; ссылки на эту функцию передаются и вызываются в других областях видимости.



// // Важно понимать, что замыкание ссылкается на переменную, а не значение
// // В данном случае к концу цикла i бдуте равно 3
// var keeps = [];
// for (var i = 0; i < 3; i++) {
// // при каждой итерации создается новая переменная `j`,
// // которой присваивается копия значения `i` на данный момент
//     let j = i;
// // переменная `i` здесь еще не замкнута, поэтому ничто не
// // мешает непосредственно использовать ее текущее значение
// // при каждой итерации цикла
//     keeps[i] = function keepEachJ(){
// // замыкание по `j`, не по `i`!
//         return j;
//     };
// }
// keeps[0](); // 0
// keeps[1](); // 1
// keeps[2](); // 2


// function lookupStudent(studentID) {
//     return function nobody(){
//         var msg = "Nobody's here yet.";
//         console.log(msg);
//     };
// }
// var student = lookupStudent(112);
// student();
// // Nobody's here yet.


// function greetStudent(studentName) {
//     return ()=>{
//         console.log(
//             `Hello, ${ studentName }!`
//         );
//     };
// }
// greetStudent("Kyle")();
// const fn = greetStudent("Kyle");
// fn()

